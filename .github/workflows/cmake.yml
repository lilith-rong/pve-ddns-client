name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        platform: [ubuntu-20.04, macos-11, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV    
    
    - name: Check 3rdparty prebuilt cache (Linux & macOS)
      id: cache-nix
      uses: actions/cache@v4
      with:
        path: 3rdparty/prebuilt
        key: ${{ runner.os }}-${{ matrix.platform }}-build-${{ hashFiles('3rdparty/build.sh') }}
      if: runner.os == 'Linux' || runner.os == 'macOS'
    
    - name: Check 3rdparty prebuilt cache (Windows)
      id: cache-win
      uses: actions/cache@v4
      with:
        path: 3rdparty/prebuilt
        key: ${{ runner.os }}-${{ matrix.platform }}-build-${{ hashFiles('3rdparty/build.bat') }}
      if: runner.os == 'Windows'
    
    - name: Prebuild 3rdparty libs (Linux & macOS)
      run: |
        # make file runnable, might not be necessary
        chmod +x "${GITHUB_WORKSPACE}/3rdparty/build.sh"
        # run script
        "${GITHUB_WORKSPACE}/3rdparty/build.sh"
      if: (runner.os == 'Linux' || runner.os == 'macOS') && steps.cache-nix.outputs.cache-hit != 'true'
      
    - name: Prebuild 3rdparty libs (Windows)
      run: |
        cmd /k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        .\build.bat
      working-directory: .\3rdparty
      if: runner.os == 'Windows' && steps.cache-win.outputs.cache-hit != 'true'
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DPVE_DDNS_CLIENT_VER="0.0.4_${{env.COMMIT_SHORT_SHA}}" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    #- name: Test
    #  working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      #run: ctest -C ${{env.BUILD_TYPE}}
    #  run: pve-ddns-client
    
    - name: Upload artifact (Linux & macOS)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-artifact
        path: |
          ${{github.workspace}}/build/pve-ddns-client
          ${{github.workspace}}/build/*.yml
      if: runner.os == 'Linux' || runner.os == 'macOS'

    - name: Upload artifact (Windows)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-artifact
        path: |
          ${{github.workspace}}\build\${{env.BUILD_TYPE}}\pve-ddns-client.exe
          ${{github.workspace}}\build\*.yml
      if: runner.os == 'Windows'
